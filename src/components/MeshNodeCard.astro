---
import type { MeshNode } from "@/data/nodes";
import { cn } from "@/lib/utils";

interface Props {
  node: MeshNode;
  class?: string;
}
const { node, class: className, ...props } = Astro.props;
---

<div
  data-slot="card"
  class={cn(
    "rounded-base flex flex-col shadow-shadow border-2 gap-4 px-8 py-6 border-border text-foreground font-base",
    className,
  )}
  {...props}>
  <div class="flex flex-col gap-2">
    <h1 class="text-3xl">
      {node.name}/{node.shortName}
    </h1>
    {
      node.description && (
        <div>
          <h2 class="text-sm opacity-80">{node.description}</h2>
        </div>
      )
    }
  </div>

  <div class="grid grid-cols-[auto_1fr] gap-x-4 gap-y-2 text-sm">
    <div class="opacity-70">Node Type:</div>
    <div>{node.nodeType}</div>

    <div class="opacity-70">Monitored:</div>
    <div>
      <span
        class={cn(
          "rounded-base px-2 py-0.5 text-xs border",
          node.monitored ? "bg-main border-border" : "border-border",
        )}>
        {node.monitored ? "Yes" : "No"}
      </span>
    </div>

    <div class="opacity-70">Model:</div>
    <div>
      {
        node.modelLink ? (
          <a
            href={node.modelLink}
            target="_blank">
            {node.model}
          </a>
        ) : (
          node.model
        )
      }
    </div>

    <div class="opacity-70">Firmware:</div>
    <div>{node.firmwareVersion}</div>

    <div class="opacity-70">Position:</div>
    <div>
      {
        typeof node.position === "string"
          ? node.position
          : `${node.position.lat}, ${node.position.lng}`
      }
    </div>
  </div>

  <slot />
</div>

<style>
  @reference "tailwindcss";

  a {
    @apply after:content-[ "_â†—"];
    text-decoration: underline;
  }
</style>
